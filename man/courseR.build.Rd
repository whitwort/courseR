% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/courseR.R
\name{courseR.build}
\alias{courseR.build}
\title{(Re)build a courseR project}
\usage{
courseR.build(projectPath = getwd(), config = yaml.load_file(configPath),
  configPath = file.path(projectPath, "courseR.yaml"),
  content = file.path(projectPath, config$paths$content),
  app = file.path(projectPath, config$paths$app),
  templates = file.path(projectPath, config$paths$templates),
  buildCache = file.path(projectPath, config$paths$buildCache),
  build = file.path(projectPath, config$paths$build),
  formats = config$output_formats, contents = config$contents,
  templateData = config$templateData, annotations = config$annotations,
  sourceExternals = config$sourceExternals,
  outputExternals = config$outputExternals, forceRebuild = FALSE,
  dumpContext = FALSE)
}
\arguments{
\item{projectPath}{a character string with the root path to a project folder.
This folder should contain the required resource subfolders (unless
alternative locations are specified). Defaults to the current working
directory.}

\item{config}{a list structure containing a full set of project configuration
settings.  Defaults to the yaml parse of the file found on configPath.}

\item{configPath}{a character string path to a yaml configuration file.
Defaults to courseR.yaml.}

\item{content}{a character string containing the path to the directory
containing content files.}

\item{app}{a character string containing the path to a directory containing
web application resources.}

\item{templates}{a character string containing the path to the directory
containing templates to be made available to post processing calls.}

\item{buildCache}{a character string containing the path to the build cache
directory.}

\item{build}{a character string containing the path to the final build
directory.}

\item{formats}{a list containing the default output formats data structure
(see the default courseR.yaml for examples).}

\item{contents}{a list containing a full site contents structure.  If NULL
then one is built using content headers; the order of both the sections and
content within sections is determined by an alphabetical sorting of content
file names.}

\item{templateData}{a list containing additional data bindings that should be
made available to the post-processing environments.}

\item{annotations}{a character vector containing the names of yaml header
fields that should be flagged as content annotations; these bindings are
made available to the post-processing environments.}

\item{sourceExternals}{a character vector containing the names of yaml header
fields that reference external files that should be considered as integral
parts of the source content (for example, data files that are loaded when
code in an RMD file is executed).  Sources are rebuilt when these files
chage and they are bundled when the final site is built.}

\item{outputExternals}{a character vector containing the names of fields on
output formats that reference external files that should be considered as
integral to the format rendering stage (for example, pandoc templates).
Outputs will be rebuilt when these files change.}

\item{forceRebuild}{a logical indicating whether or not the entire project
should be rerendered and rebuilt, irrespective of the state of the
intermediate cache.  Mostly useful for debugging purposes.}

\item{dumpContext}{a logical indicating whether or not data bindings
  available to post-processors should be dumped to YAML files for each output
  being produced.  Useful during development for discovering what variables
  are available for use in post-processing functions.}
}
\description{
All of the arguments to this function can be provided in the project
courseR.yaml configuration file.  By default the current working directory is
assumed to be the project root.  See the courseR.yaml file provided in the
template project for a full description of all of the project build options.
}

